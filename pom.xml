<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.fugerit.java.demo</groupId>
  <artifactId>quarkus-photobook</artifactId>
  <version>1.0.1-SNAPSHOT</version>
  <properties>
    <compiler-plugin.version>3.12.1</compiler-plugin.version>
    <maven.compiler.release>21</maven.compiler.release>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
    <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
    <quarkus.platform.version>3.15.1</quarkus.platform.version>
    <skipITs>true</skipITs>
    <surefire-plugin.version>3.2.5</surefire-plugin.version>
    <lombok-version>1.18.34</lombok-version>
    <fj-version>8.6.6</fj-version>
    <buildnumber-maven-plugin-version>3.2.0</buildnumber-maven-plugin-version>
    <licenseURL>http://www.apache.org/licenses/LICENSE-2.0.txt</licenseURL>
    <!-- front end runtime -->
    <src.react>src/main/react</src.react>
    <npm.build.script>build</npm.build.script>
    <fe.dist.dir>src/main/resources/META-INF/resources/home/</fe.dist.dir>
    <exec-plugin.version>3.1.0</exec-plugin.version>
    <antrun-plugin.version>3.1.0</antrun-plugin.version>
    <jacoco-maven-plugin-version>0.8.12</jacoco-maven-plugin-version>
    <graalvm-maven-plugin-version>0.10.2</graalvm-maven-plugin-version>
    <native-base-args>-H:IncludeResources=build.properties</native-base-args>
    <quarkus.native.additional-build-args>${native-base-args}</quarkus.native.additional-build-args>
    <sonar.coverage.jacoco.xmlReportPaths>${project.basedir}/target/jacoco-report/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
  </properties>

  <scm>
    <connection>scm:git:git://github.com/fugerit-org/quarkus-photobook.git</connection>
    <developerConnection>scm:git:ssh://github.com/fugerit-org/quarkus-photobook.git</developerConnection>
    <url>https://github.com/fugerit-org/quarkus-photobook.git</url>
  </scm>


  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>${quarkus.platform.group-id}</groupId>
        <artifactId>${quarkus.platform.artifact-id}</artifactId>
        <version>${quarkus.platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>testcontainers-bom</artifactId>
        <version>1.19.8</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-rest-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-health</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-cache</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-openapi</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-jacoco</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-config-yaml</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-mongodb-client</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-arc</artifactId>
    </dependency>
    <dependency>
      <groupId>org.fugerit.java</groupId>
      <artifactId>fj-core</artifactId>
      <version>${fj-version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok-version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>mongodb</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>${quarkus.platform.group-id}</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
        <version>${quarkus.platform.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <goals>
              <goal>build</goal>
              <goal>generate-code</goal>
              <goal>generate-code-tests</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${compiler-plugin.version}</version>
        <configuration>
          <compilerArgs>
            <arg>-parameters</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire-plugin.version}</version>
        <configuration>
          <systemPropertyVariables>
            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
            <maven.home>${maven.home}</maven.home>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${surefire-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <systemPropertyVariables>
            <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>
            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
            <maven.home>${maven.home}</maven.home>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
        <version>${buildnumber-maven-plugin-version}</version>
        <executions>
          <execution>
            <configuration>
              <shortRevisionLength>10</shortRevisionLength>
              <attach>true</attach>
              <!--make it available for jar/war classpath resource -->
              <addOutputDirectoryToResources>true</addOutputDirectoryToResources>
            </configuration>
            <phase>generate-resources</phase>
            <goals>
              <goal>create-metadata</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>native</id>
      <activation>
        <property>
          <name>native</name>
        </property>
      </activation>
      <properties>
        <skipITs>false</skipITs>
        <quarkus.package.type>native</quarkus.package.type>
      </properties>
    </profile>

    <profile>

      <id>buildreact</id>

      <build>

        <plugins>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>${exec-plugin.version}</version>
            <executions>
              <!-- Required: The following will ensure `npm install` is called
           before anything else during the 'Default Lifecycle' -->
              <execution>
                <id>npm install (initialize)</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>initialize</phase>
                <configuration>
                  <executable>npm</executable>
                  <arguments>
                    <argument>install</argument>
                    <argument>--legacy-peer-deps</argument>
                  </arguments>
                  <workingDirectory>${src.react}</workingDirectory>
                </configuration>
              </execution>
              <!-- Required: The following will ensure `npm install` is called
           before anything else during the 'Clean Lifecycle' -->
              <execution>
                <id>npm install (clean)</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>pre-clean</phase>
                <configuration>
                  <executable>npm</executable>
                  <arguments>
                    <argument>install</argument>
                    <argument>--legacy-peer-deps</argument>
                  </arguments>
                  <workingDirectory>${src.react}</workingDirectory>
                </configuration>
              </execution>

              <!-- Required: This following calls `npm run build` where 'build' is
           the script name I used in my project, change this if yours is
               different -->
              <execution>
                <id>npm run build (compile)</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>generate-sources</phase>
                <configuration>
                  <executable>npm</executable>
                  <arguments>
                    <argument>run</argument>
                    <argument>${npm.build.script}</argument>
                  </arguments>
                  <workingDirectory>${src.react}</workingDirectory>
                </configuration>
              </execution>

            </executions>

          </plugin>

          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>${antrun-plugin.version}</version>
            <executions>
              <execution>
                <id>copy front end</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target>
                    <delete dir="${fe.dist.dir}" />
                    <mkdir dir="${fe.dist.dir}" />
                    <copy todir="${fe.dist.dir}">
                      <fileset dir="${src.react}/dist">
                        <include name="**/*.*" />
                      </fileset>
                    </copy>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>

      </build>

    </profile>

    <profile>
      <id>sonarfugerit</id>
      <properties>
        <!-- sonar cloud configuration -->
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.organization>fugerit-org</sonar.organization>
        <sonar.moduleKey>${project.artifactId}</sonar.moduleKey>
        <!-- sonar.projectKey must be added by the project -->
      </properties>
    </profile>

    <profile>
      <id>coverage</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skipTests>false</skipTests>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>${jacoco-maven-plugin-version}</version>
            <executions>
              <execution>
                <id>prepare-agent</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
                <configuration>
                  <exclClassLoaders>*QuarkusClassLoader</exclClassLoaders>
                  <destFile>${project.build.directory}/jacoco-quarkus.exec</destFile> <!-- this is the fix -->
                  <append>true</append>
                </configuration>
              </execution>
              <execution>
                <id>generate-code-coverage-report</id>
                <phase>test</phase>
                <goals>
                  <goal>report</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>monitored</id>
      <properties>
        <quarkus.native.additional-build-args>--pgo=${project.basedir}/default.iprof -march=native --enable-monitoring=heapdump,jfr,jvmstat</quarkus.native.additional-build-args>
      </properties>
    </profile>

    <profile>
      <id>instrumented</id>
      <properties>
        <quarkus.native.additional-build-args>${native-base-args},--pgo-instrument</quarkus.native.additional-build-args>
      </properties>
    </profile>

    <profile>
      <id>optimized</id>
      <properties>
        <quarkus.native.additional-build-args>${native-base-args},--pgo=${project.basedir}/default.iprof,-march=native</quarkus.native.additional-build-args>
      </properties>
    </profile>

  </profiles>

</project>
